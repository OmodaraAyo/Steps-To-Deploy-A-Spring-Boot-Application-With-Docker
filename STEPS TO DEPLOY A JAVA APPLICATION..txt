✅ HOW TO DEPLOY A JAVA SPRING BOOT APPLICATION (STEP-BY-STEP GUIDE)

──────────────────────────────────────────────
STEP 1: SET ENVIRONMENT VARIABLES
──────────────────────────────────────────────

🟢 For Linux / macOS:
export SPRING_APPLICATION_NAME=your-app-name
export SPRING_DATASOURCE_URL=your-database-url
./mvnw package

🟢 For Windows (Command Prompt):
set SPRING_APPLICATION_NAME=your-app-name
set SPRING_DATASOURCE_URL=your-database-url
mvnw package

🟢 For Windows (PowerShell):
$env:SPRING_APPLICATION_NAME="your-app-name"
$env:SPRING_DATASOURCE_URL="your-database-url"
./mvnw package

📝 Example for MongoDB (PowerShell):
$env:MONGODB_URI="mongodb+srv://username:password@cluster.mongodb.net/?retryWrites=true&w=majority"
$env:DATABASE_NAME="contactdb"

──────────────────────────────────────────────
STEP 2: BUILD THE APPLICATION
──────────────────────────────────────────────

./mvnw clean package

⚠️ If Maven wrapper (mvnw) is not available:
Install Apache Maven globally and run:
mvn package

──────────────────────────────────────────────
STEP 3: CREATE A DOCKERFILE
──────────────────────────────────────────────

➕ Create a file named "Dockerfile" in your project root:

# Stage 1: Build
FROM maven:3.8.4-openjdk-17 AS build
WORKDIR /app
COPY pom.xml .
RUN mvn dependency:go-offline
COPY src ./src
RUN mvn clean package -DskipTests

# Stage 2: Run
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY --from=build /app/target/contactManager-1.0-SNAPSHOT.jar .
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "/app/contactManager-1.0-SNAPSHOT.jar"]

📌 Replace "contactManager-1.0-SNAPSHOT.jar" with your actual jar file (ignore the .original one in /target)

──────────────────────────────────────────────
STEP 4: BUILD THE DOCKER IMAGE
──────────────────────────────────────────────

docker build -t your-app-name .

──────────────────────────────────────────────
STEP 5: TAG THE DOCKER IMAGE
──────────────────────────────────────────────

docker tag your-app-name your-dockerhub-username/your-app-name:latest

──────────────────────────────────────────────
STEP 6: PUSH TO DOCKER HUB
──────────────────────────────────────────────

docker push your-dockerhub-username/your-app-name:latest

❗ If you get:
denied: requested access to the resource is denied
→ Run:
docker login

──────────────────────────────────────────────
STEP 7: VERIFY ON DOCKER DESKTOP
──────────────────────────────────────────────

Make sure your pushed image appears on your Docker Hub account.

──────────────────────────────────────────────
STEP 8: DEPLOY TO RENDER
──────────────────────────────────────────────

1. Visit https://render.com
2. Create a new "Web Service"
3. Choose: "Deploy an existing Docker image"
4. Add your Docker credentials
5. Use image reference:
   docker.io/your-dockerhub-username/your-app-name:latest
6. Add environment variables:
   Use "Add from .env" or paste manually.

──────────────────────────────────────────────
STEP 9: CONFIGURE DATABASE (OPTIONAL)
──────────────────────────────────────────────

🎯 PostgreSQL Example (Neon.tech):

JDBC URL Format:
jdbc:postgresql://ep-example.us-east-2.aws.neon.tech/db-name

ENV Variables:
DATASOURCE_URL=jdbc:postgresql://ep-example.us-east-2.aws.neon.tech/your-db
DATASOURCE_USER=your-db-username
DATASOURCE_PASSWORD=your-db-password

🔗 https://neon.tech — Free PostgreSQL hosting

──────────────────────────────────────────────

✅ DONE! YOUR SPRING BOOT APP IS NOW DEPLOYED WITH DOCKER + RENDER 🚀
